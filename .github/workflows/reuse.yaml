
name: action pour cloner un repo
on: 
  workflow_call:
    inputs:
      channel_id:
        required: true
        type: string
      dependency_track_project_name:
        required: true
        type: string
      target_folder_path:
        required: true
        type: string

    secrets:
      slack_token:
        required: true
        #type: string
      sonar_token:
        required: true
      sonar_host_url:
        required: true
      dependency_track_api_key:
        required: true
      host:
        required: true
      username:
        required: true
      key:
        required: true
        
jobs: 
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        php: [8.2]
        
    steps:
    - name: clone repo
      uses: actions/checkout@v3

    # - name: Setup PHP with PECL extension
    #   uses: shivammathur/setup-php@v2
    #   with:
    #     php-version: ${{ matrix.php }}
    #     extensions: imagick, swoole

    # - name: keygenerate
    #   run: |
    #       composer install --prefer-dist
    #       composer update
    #       cp .env.example .env
    #       php artisan key:generate 

    # - name: testexec
    #   run: |
    #       php artisan test

    # - name: dockerbuild
    #   run: |
    #       docker build . 

    # - name: SonarQube Scan
    #   uses: sonarsource/sonarqube-scan-action@master
    #   env:
    #     SONAR_TOKEN: ${{ secrets.sonar_token }}
    #     SONAR_HOST_URL: ${{ secrets.sonar_host_url }}

    # - name: Generate SBOM with CycloneDX
    #   run: |
    #     composer config --no-plugins allow-plugins.cyclonedx/cyclonedx-php-composer true
    #     composer require --dev cyclonedx/cyclonedx-php-composer
    #     composer update
    #     composer CycloneDX:make-sbom --output-file=sbom.xml
         
    # - name: Dependency Track
    #   run: |
    #     curl -X "POST" "http://13.60.7.234:8081/api/v1/bom" \
    #     -H 'Content-Type: multipart/form-data' \
    #     -H "X-Api-Key: ${{ secrets.dependency_track_api_key }}" \
    #     -F "autoCreate=true" \
    #     -F "projectName=${{ inputs.dependency_track_project_name }}" \
    #     -F "projectVersion=1.0" \
    #     -F "bom=@./sbom.xml"

    - name: copy file via ssh key
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.host }}
        username: ${{ secrets.username }}
        port: 22
        key: ${{ secrets.key }}
        source: .
        target: /home/ec2-user/cd_pratique

    - name: multiple command
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.host }}
        username: ${{ secrets.username }}
        port: 22
        key: ${{ secrets.key }}
        script: |
          sudo yum update -y
          sudo yum install php -y
          sudo yum install git -y
          sudo yum install httpd -y
          sudo systemctl start httpd
          sudo systemctl enable httpd
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php -r "if (hash_file('sha384', 'composer-setup.php') === 'edb40769019ccf227279e3bdd1f5b2e9950eb000c3233ee85148944e555d97be3ea4f40c3c2fe73b22f875385f6a5155') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
          php composer-setup.php
          php -r "unlink('composer-setup.php');"
          sudo mv composer.phar /usr/local/bin/composer
          sudo mv /home/ec2-user/${{ inputs.target_folder_path }} /var/www/html/
          sudo chown -R apache:apache /var/www/html/${{ inputs.target_folder_path }}
          cd /var/www/html/${{ inputs.target_folder_path }}
          composer install --prefer-dist
          composer update
          cp .env.example .env
          php artisan key:generate 
          php artisan up

    - name: Post to a Slack channel
      id: slack
      if: ${{ always() }}
      uses: slackapi/slack-github-action@v1.25.0
      with:
        # Slack channel id, channel name, or user id to post message.
        # See also: https://api.slack.com/methods/chat.postMessage#channels
        # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
        #channel-id: ${{ vars.CHANNEL_ID }}
        channel-id: ${{ inputs.channel_id }}
        # For posting a simple plain text message
        #Envoie le messsage sur le canal slack le message devra contenir le status du job, Le numero du build, le runner surlequel ceci a été executé, le nom du workflow, le github repository
        slack-message: "GitHub build result: ${{ job.status }}\n Nom du build :${{github.job}}\n Numero du build :${{github.sha}} \n Auteur :${{github.actor}}"
      env:
        #SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_BOT_TOKEN: ${{ secrets.slack_token }}

      



 
